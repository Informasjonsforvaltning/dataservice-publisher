name: Deploy to staging

on:
  pull_request:
    types: [ready_for_review, opened, reopened, synchronize]
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build, test, publish and deploy to staging environment
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Auth gcloud CLI for image-store
        uses: google-github-actions/auth@main
        with:
          credentials_json: ${{ secrets.GCP_SA_DIGDIR_FDK_GCR_KEY }}

      - name: Configure docker to use the gcloud command-line tool as a credential helper
        run: gcloud auth configure-docker eu.gcr.io

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: .cache
          key: ${{ runner.os }}-nox-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nox-

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: x64

      - name: Install dependencies
        run: |
          pip install nox==2020.12.31
          pip install poetry==1.1.4
          pip install nox-poetry==0.8.4

      - name: Build image and test with nox
        run: nox
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          FUSEKI_PASSWORD: ${{ secrets.FUSEKI_PASSWORD }}

      - name: Tag and publish docker image to Google Cloud
        run: |
          docker tag eu.gcr.io/digdir-fdk-infra/dataservice-publisher:test eu.gcr.io/digdir-fdk-infra/dataservice-publisher:$GITHUB_SHA
          docker tag eu.gcr.io/digdir-fdk-infra/dataservice-publisher:test eu.gcr.io/digdir-fdk-infra/dataservice-publisher:staging_latest
          docker rmi eu.gcr.io/digdir-fdk-infra/dataservice-publisher:test
          docker -- push eu.gcr.io/digdir-fdk-infra/dataservice-publisher -a

      - name: Apply Helm template
        run: |
          helm repo add fdk https://informasjonsforvaltning.github.io/helm-chart/
          helm fetch --untar --untardir ./helm fdk/dataservice-publisher
          helm template --set DOCKER_IMAGE_NAME="eu.gcr.io/digdir-fdk-infra/dataservice-publisher:$GITHUB_SHA" \
          -f ./helm/dataservice-publisher/values/staging.yaml \
          ./helm/dataservice-publisher/ > ./kubectlapply.yaml
          chmod o+w ./kubectlapply.yaml
          cat kubectlapply.yaml

      - name: Auth gcloud CLI for deploy
        uses: google-github-actions/auth@main
        with:
          credentials_json: ${{ secrets.DIGDIR_FDK_DEV_AUTODEPLOY }}

      - name: Deploy to GCP
        run: |
          gcloud container clusters get-credentials digdir-fdk-dev --region europe-north1-a --project digdir-fdk-dev
          kubectl apply -f ./kubectlapply.yaml --force
          if ! kubectl --namespace=staging rollout status deployment dataservice-publisher; then
          kubectl --namespace=staging rollout undo deployment dataservice-publisher
          kubectl --namespace=staging rollout status deployment dataservice-publisher
          exit 1
          fi

      - name: Notify slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: 'Application: dataservice-publisher | Environment: staging'
          fields: commit,author,workflow
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
